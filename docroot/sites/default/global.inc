<?php

function enable_http_auth($username = 'drupal', $password = 'drupal7#', $message = 'This site is protected') 
{
	// Make sure Drush keeps working. 
	// Modified from function drush_verify_cli()
	$cli = (php_sapi_name() == 'cli');
	// PASSWORD-PROTECT NON-PRODUCTION SITES (i.e. staging/dev)
	if (!$cli) {

	  if (!(isset($_SERVER['PHP_AUTH_USER']) && ($_SERVER['PHP_AUTH_USER']==$username && $_SERVER['PHP_AUTH_PW']==$password))) {
	    header('WWW-Authenticate: Basic realm="This site is protected"');
	    header('HTTP/1.0 401 Unauthorized');
	    // Fallback message when the user presses cancel / escape
	    echo $message;
	    exit;
	  }
	}
}



//Common Settings for ALL Environments

$databases = array();

/**
 * Access control for update.php script.
 *
 * If you are updating your Drupal installation using the update.php script but
 * are not logged in using either an account with the "Administer software
 * updates" permission or the site maintenance account (the account that was
 * created during installation), you will need to modify the access check
 * statement below. Change the FALSE to a TRUE to disable the access check.
 * After finishing the upgrade, be sure to open this file again and change the
 * TRUE back to a FALSE!
 */
$update_free_access = FALSE;

/**
 * Salt for one-time login links and cancel links, form tokens, etc.
 *
 * This variable will be set to a random value by the installer. All one-time
 * login links will be invalidated if the value is changed. Note that if your
 * site is deployed on a cluster of web servers, you must ensure that this
 * variable has the same value on each server. If this variable is empty, a hash
 * of the serialized database credentials will be used as a fallback salt.
 *
 * For enhanced security, you may set this variable to a value using the
 * contents of a file outside your docroot that is never saved together
 * with any backups of your Drupal files and database.
 *
 * Example:
 *   $drupal_hash_salt = file_get_contents('/home/example/salt.txt');
 *
 */
$drupal_hash_salt = '';

/**
 * Some distributions of Linux (most notably Debian) ship their PHP
 * installations with garbage collection (gc) disabled. Since Drupal depends on
 * PHP's garbage collection for clearing sessions, ensure that garbage
 * collection occurs by using the most common settings.
 */
ini_set('session.gc_probability', 1);
ini_set('session.gc_divisor', 100);

/**
 * Set session lifetime (in seconds), i.e. the time from the user's last visit
 * to the active session may be deleted by the session garbage collector. When
 * a session is deleted, authenticated users are logged out, and the contents
 * of the user's $_SESSION variable is discarded.
 */
ini_set('session.gc_maxlifetime', 200000);

/**
 * Set session cookie lifetime (in seconds), i.e. the time from the session is
 * created to the cookie expires, i.e. when the browser is expected to discard
 * the cookie. The value 0 means "until the browser is closed".
 */
ini_set('session.cookie_lifetime', 2000000);


/**
 * Fast 404 pages:
 *
 * Drupal can generate fully themed 404 pages. However, some of these responses
 * are for images or other resource files that are not displayed to the user.
 * This can waste bandwidth, and also generate server load.
 *
 * The options below return a simple, fast 404 page for URLs matching a
 * specific pattern:
 * - 404_fast_paths_exclude: A regular expression to match paths to exclude,
 *   such as images generated by image styles, or dynamically-resized images.
 *   If you need to add more paths, you can add '|path' to the expression.
 * - 404_fast_paths: A regular expression to match paths that should return a
 *   simple 404 page, rather than the fully themed 404 page. If you don't have
 *   any aliases ending in htm or html you can add '|s?html?' to the expression.
 * - 404_fast_html: The html to return for simple 404 pages.
 *
 * Add leading hash signs if you would like to disable this functionality.
 */
$conf['404_fast_paths_exclude'] = '/\/(?:styles)\//';
$conf['404_fast_paths'] = '/\.(?:txt|png|gif|jpe?g|css|js|ico|swf|flv|cgi|bat|pl|dll|exe|asp)$/i';
$conf['404_fast_html'] = '<html xmlns="http://www.w3.org/1999/xhtml"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>';

//if we aren't local use memcache server
if((isset($IsLocal)) && !$IsLocal)
{
	$conf['cache_backends'][] = './sites/all/modules/memcache/memcache.inc';
	$conf['cache_default_class'] = 'MemCacheDrupal';
	$conf['cache_class_cache_form'] = 'DrupalDatabaseCache';
}

//Non-prod settings
if(((isset($_ENV['AH_NON_PRODUCTION']) && $_ENV['AH_NON_PRODUCTION'])) || ((isset($IsLocal))) && $IsLocal)
{
	$conf['apachesolr_read_only'] = "1";

	// Page cache
	$conf['cache'] = FALSE;
	 
	// Block cache
	$conf['block_cache'] = FALSE;
	 
	// Optimize CSS files
	$conf['preprocess_css'] = FALSE;
	 
	// Optimize JavaScript files
	$conf['preprocess_js'] = FALSE;

	
}
else
{
	$conf['apachesolr_read_only'] = "0";

	// Page cache
	$conf['cache'] = TRUE;
	 
	// Block cache
	$conf['block_cache'] = FALSE;
	 
	// Optimize CSS files
	$conf['preprocess_css'] = FALSE;
	 
	// Optimize JavaScript files
	$conf['preprocess_js'] = FALSE;
}